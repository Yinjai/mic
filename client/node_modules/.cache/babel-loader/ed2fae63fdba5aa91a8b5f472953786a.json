{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Vincent\\\\Documents\\\\Coding\\\\mic\\\\client\\\\src\\\\functions\\\\PodcastFeed.js\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PodBlock from '../components/PodBlock';\nimport EpisodeInfoBlock from '../components/EpisodeInfoBlock';\n\nfunction PodcastFeed(props) {\n  const corsUrl = \"https://api.rss2json.com/v1/api.json?rss_url=http://feeds.soundcloud.com/users/soundcloud:users:153165239/sounds.rss\";\n  const [initialised, setInitialised] = useState(false);\n  const [listings, setListings] = useState([]);\n  const [data, setData] = useState({});\n\n  const getListings = async () => {\n    try {\n      const response = await axios.get(corsUrl);\n      setListings(response.data.items);\n      setData(response.data.feed);\n    } catch (ex) {\n      console.log(ex);\n    }\n  };\n\n  useEffect(() => {\n    if (!initialised) {\n      getListings(corsUrl);\n      setInitialised(true);\n    }\n  });\n\n  if (props.variant === \"single\") {\n    const episodeInfo = listings.filter(listings => listings.guid.split('tracks/').pop() === props.episodeId);\n    return episodeInfo.map((l, i) => {\n      return /*#__PURE__*/React.createElement(EpisodeInfoBlock, {\n        key: i,\n        title: l.title,\n        description: l.description,\n        pubDate: l.pubDate,\n        thumbnail: l.thumbnail,\n        episodeId: props.episodeId,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }\n      });\n    });\n  } else {\n    return listings.slice(0, 6).map((l, i) => {\n      return /*#__PURE__*/React.createElement(PodBlock, {\n        index: l.guid.split('tracks/').pop(),\n        key: i,\n        title: l.title,\n        description: l.description,\n        thumbnail: l.thumbnail,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 21\n        }\n      });\n    });\n  }\n}\n\nexport default PodcastFeed;","map":{"version":3,"sources":["C:/Users/Vincent/Documents/Coding/mic/client/src/functions/PodcastFeed.js"],"names":["React","useState","useEffect","axios","PodBlock","EpisodeInfoBlock","PodcastFeed","props","corsUrl","initialised","setInitialised","listings","setListings","data","setData","getListings","response","get","items","feed","ex","console","log","variant","episodeInfo","filter","guid","split","pop","episodeId","map","l","i","title","description","pubDate","thumbnail","slice"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,gBAAP,MAA6B,gCAA7B;;AAEA,SAASC,WAAT,CAAsBC,KAAtB,EAA6B;AAEzB,QAAMC,OAAO,GAAG,sHAAhB;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCT,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAACU,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,IAAD,EAAOC,OAAP,IAAmBb,QAAQ,CAAC,EAAD,CAAjC;;AAEA,QAAMc,WAAW,GAAG,YAAY;AAC5B,QAAI;AACA,YAAMC,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAN,CAAUT,OAAV,CAAvB;AACAI,MAAAA,WAAW,CAACI,QAAQ,CAACH,IAAT,CAAcK,KAAf,CAAX;AACAJ,MAAAA,OAAO,CAACE,QAAQ,CAACH,IAAT,CAAcM,IAAf,CAAP;AACH,KAJD,CAIE,OAAOC,EAAP,EAAW;AACTC,MAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ;AACH;AACJ,GARD;;AAUAlB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACO,WAAL,EAAkB;AAChBM,MAAAA,WAAW,CAACP,OAAD,CAAX;AACAE,MAAAA,cAAc,CAAC,IAAD,CAAd;AACD;AACJ,GALQ,CAAT;;AAOA,MAAGH,KAAK,CAACgB,OAAN,KAAgB,QAAnB,EAA6B;AACzB,UAAMC,WAAW,GAAGb,QAAQ,CAACc,MAAT,CAAgBd,QAAQ,IAAIA,QAAQ,CAACe,IAAT,CAAcC,KAAd,CAAoB,SAApB,EAA+BC,GAA/B,OAAyCrB,KAAK,CAACsB,SAA3E,CAApB;AACA,WACIL,WAAW,CAACM,GAAZ,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACtB,0BACI,oBAAC,gBAAD;AACI,QAAA,GAAG,EAAEA,CADT;AAEI,QAAA,KAAK,EAAED,CAAC,CAACE,KAFb;AAGI,QAAA,WAAW,EAAEF,CAAC,CAACG,WAHnB;AAII,QAAA,OAAO,EAAEH,CAAC,CAACI,OAJf;AAKI,QAAA,SAAS,EAAEJ,CAAC,CAACK,SALjB;AAMI,QAAA,SAAS,EAAE7B,KAAK,CAACsB,SANrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AAUH,KAXD,CADJ;AAcH,GAhBD,MAgBO;AACH,WACIlB,QAAQ,CAAC0B,KAAT,CAAe,CAAf,EAAiB,CAAjB,EAAoBP,GAApB,CAAwB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAC9B,0BACI,oBAAC,QAAD;AACI,QAAA,KAAK,EAAED,CAAC,CAACL,IAAF,CAAOC,KAAP,CAAa,SAAb,EAAwBC,GAAxB,EADX;AAEI,QAAA,GAAG,EAAEI,CAFT;AAGI,QAAA,KAAK,EAAED,CAAC,CAACE,KAHb;AAII,QAAA,WAAW,EAAEF,CAAC,CAACG,WAJnB;AAKI,QAAA,SAAS,EAAEH,CAAC,CAACK,SALjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADJ;AASH,KAVD,CADJ;AAaH;AACJ;;AAED,eAAe9B,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport PodBlock from '../components/PodBlock';\r\nimport EpisodeInfoBlock from '../components/EpisodeInfoBlock';\r\n\r\nfunction PodcastFeed (props) {\r\n  \r\n    const corsUrl = \"https://api.rss2json.com/v1/api.json?rss_url=http://feeds.soundcloud.com/users/soundcloud:users:153165239/sounds.rss\";\r\n    const [initialised, setInitialised] = useState(false);\r\n    const [listings, setListings] = useState([]);\r\n    const [data, setData]  = useState({});\r\n       \r\n    const getListings = async () => {\r\n        try {\r\n            const response = await axios.get(corsUrl);\r\n            setListings(response.data.items);\r\n            setData(response.data.feed);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!initialised) {\r\n          getListings(corsUrl);\r\n          setInitialised(true);\r\n        }\r\n    });\r\n\r\n    if(props.variant===\"single\") {\r\n        const episodeInfo = listings.filter(listings => listings.guid.split('tracks/').pop() === props.episodeId);\r\n        return(\r\n            episodeInfo.map((l, i) => {\r\n                return(\r\n                    <EpisodeInfoBlock\r\n                        key={i} \r\n                        title={l.title}\r\n                        description={l.description}\r\n                        pubDate={l.pubDate}\r\n                        thumbnail={l.thumbnail}\r\n                        episodeId={props.episodeId}\r\n                    />\r\n                )\r\n            })\r\n        )\r\n    } else {\r\n        return(\r\n            listings.slice(0,6).map((l, i) => {\r\n                return (\r\n                    <PodBlock \r\n                        index={l.guid.split('tracks/').pop()} \r\n                        key={i} \r\n                        title={l.title}\r\n                        description={l.description}\r\n                        thumbnail={l.thumbnail}\r\n                    />\r\n                );\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nexport default PodcastFeed"]},"metadata":{},"sourceType":"module"}