{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Vincent\\\\Documents\\\\Coding\\\\mic\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Vincent\\\\Documents\\\\Coding\\\\mic\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Vincent\\\\Documents\\\\Coding\\\\mic\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import axios from'axios';import PodBlock from'../components/PodBlock';import EpisodeInfoBlock from'../components/EpisodeInfoBlock';function PodcastFeed(props){var corsUrl=\"https://api.rss2json.com/v1/api.json?rss_url=http://feeds.soundcloud.com/users/soundcloud:users:153165239/sounds.rss\";var _useState=useState(false),_useState2=_slicedToArray(_useState,2),initialised=_useState2[0],setInitialised=_useState2[1];var _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),listings=_useState4[0],setListings=_useState4[1];var _useState5=useState({}),_useState6=_slicedToArray(_useState5,2),data=_useState6[0],setData=_useState6[1];var getListings=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var response;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return axios.get(corsUrl);case 3:response=_context.sent;setListings(response.data.items);setData(response.data.feed);_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](0);console.log(_context.t0);case 11:case\"end\":return _context.stop();}}},_callee,null,[[0,8]]);}));return function getListings(){return _ref.apply(this,arguments);};}();useEffect(function(){if(!initialised){getListings(corsUrl);setInitialised(true);}});if(props.variant===\"single\"){var episodeInfo=listings.filter(function(listings){return listings.guid.split('tracks/').pop()===props.episodeId;});return episodeInfo.map(function(l,i){return/*#__PURE__*/React.createElement(EpisodeInfoBlock,{key:i,title:l.title,description:l.description,pubDate:l.pubDate,thumbnail:l.thumbnail,episodeId:props.episodeId});});}else{return listings.slice(0,6).map(function(l,i){return/*#__PURE__*/React.createElement(PodBlock,{index:l.guid.split('tracks/').pop(),key:i,title:l.title,description:l.description,thumbnail:l.thumbnail});});}}export default PodcastFeed;","map":{"version":3,"sources":["C:/Users/Vincent/Documents/Coding/mic/client/src/functions/PodcastFeed.js"],"names":["React","useState","useEffect","axios","PodBlock","EpisodeInfoBlock","PodcastFeed","props","corsUrl","initialised","setInitialised","listings","setListings","data","setData","getListings","get","response","items","feed","console","log","variant","episodeInfo","filter","guid","split","pop","episodeId","map","l","i","title","description","pubDate","thumbnail","slice"],"mappings":"ugBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,QAAP,KAAqB,wBAArB,CACA,MAAOC,CAAAA,gBAAP,KAA6B,gCAA7B,CAEA,QAASC,CAAAA,WAAT,CAAsBC,KAAtB,CAA6B,CAEzB,GAAMC,CAAAA,OAAO,CAAG,sHAAhB,CAFyB,cAGaP,QAAQ,CAAC,KAAD,CAHrB,wCAGlBQ,WAHkB,eAGLC,cAHK,8BAIOT,QAAQ,CAAC,EAAD,CAJf,yCAIlBU,QAJkB,eAIRC,WAJQ,8BAKAX,QAAQ,CAAC,EAAD,CALR,yCAKlBY,IALkB,eAKZC,OALY,eAOzB,GAAMC,CAAAA,WAAW,0FAAG,sLAEWZ,CAAAA,KAAK,CAACa,GAAN,CAAUR,OAAV,CAFX,QAENS,QAFM,eAGZL,WAAW,CAACK,QAAQ,CAACJ,IAAT,CAAcK,KAAf,CAAX,CACAJ,OAAO,CAACG,QAAQ,CAACJ,IAAT,CAAcM,IAAf,CAAP,CAJY,+EAMZC,OAAO,CAACC,GAAR,cANY,oEAAH,kBAAXN,CAAAA,WAAW,0CAAjB,CAUAb,SAAS,CAAC,UAAM,CACZ,GAAI,CAACO,WAAL,CAAkB,CAChBM,WAAW,CAACP,OAAD,CAAX,CACAE,cAAc,CAAC,IAAD,CAAd,CACD,CACJ,CALQ,CAAT,CAOA,GAAGH,KAAK,CAACe,OAAN,GAAgB,QAAnB,CAA6B,CACzB,GAAMC,CAAAA,WAAW,CAAGZ,QAAQ,CAACa,MAAT,CAAgB,SAAAb,QAAQ,QAAIA,CAAAA,QAAQ,CAACc,IAAT,CAAcC,KAAd,CAAoB,SAApB,EAA+BC,GAA/B,KAAyCpB,KAAK,CAACqB,SAAnD,EAAxB,CAApB,CACA,MACIL,CAAAA,WAAW,CAACM,GAAZ,CAAgB,SAACC,CAAD,CAAIC,CAAJ,CAAU,CACtB,mBACI,oBAAC,gBAAD,EACI,GAAG,CAAEA,CADT,CAEI,KAAK,CAAED,CAAC,CAACE,KAFb,CAGI,WAAW,CAAEF,CAAC,CAACG,WAHnB,CAII,OAAO,CAAEH,CAAC,CAACI,OAJf,CAKI,SAAS,CAAEJ,CAAC,CAACK,SALjB,CAMI,SAAS,CAAE5B,KAAK,CAACqB,SANrB,EADJ,CAUH,CAXD,CADJ,CAcH,CAhBD,IAgBO,CACH,MACIjB,CAAAA,QAAQ,CAACyB,KAAT,CAAe,CAAf,CAAiB,CAAjB,EAAoBP,GAApB,CAAwB,SAACC,CAAD,CAAIC,CAAJ,CAAU,CAC9B,mBACI,oBAAC,QAAD,EACI,KAAK,CAAED,CAAC,CAACL,IAAF,CAAOC,KAAP,CAAa,SAAb,EAAwBC,GAAxB,EADX,CAEI,GAAG,CAAEI,CAFT,CAGI,KAAK,CAAED,CAAC,CAACE,KAHb,CAII,WAAW,CAAEF,CAAC,CAACG,WAJnB,CAKI,SAAS,CAAEH,CAAC,CAACK,SALjB,EADJ,CASH,CAVD,CADJ,CAaH,CACJ,CAED,cAAe7B,CAAAA,WAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport PodBlock from '../components/PodBlock';\r\nimport EpisodeInfoBlock from '../components/EpisodeInfoBlock';\r\n\r\nfunction PodcastFeed (props) {\r\n  \r\n    const corsUrl = \"https://api.rss2json.com/v1/api.json?rss_url=http://feeds.soundcloud.com/users/soundcloud:users:153165239/sounds.rss\";\r\n    const [initialised, setInitialised] = useState(false);\r\n    const [listings, setListings] = useState([]);\r\n    const [data, setData]  = useState({});\r\n       \r\n    const getListings = async () => {\r\n        try {\r\n            const response = await axios.get(corsUrl);\r\n            setListings(response.data.items);\r\n            setData(response.data.feed);\r\n        } catch (ex) {\r\n            console.log(ex);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!initialised) {\r\n          getListings(corsUrl);\r\n          setInitialised(true);\r\n        }\r\n    });\r\n\r\n    if(props.variant===\"single\") {\r\n        const episodeInfo = listings.filter(listings => listings.guid.split('tracks/').pop() === props.episodeId);\r\n        return(\r\n            episodeInfo.map((l, i) => {\r\n                return(\r\n                    <EpisodeInfoBlock\r\n                        key={i} \r\n                        title={l.title}\r\n                        description={l.description}\r\n                        pubDate={l.pubDate}\r\n                        thumbnail={l.thumbnail}\r\n                        episodeId={props.episodeId}\r\n                    />\r\n                )\r\n            })\r\n        )\r\n    } else {\r\n        return(\r\n            listings.slice(0,6).map((l, i) => {\r\n                return (\r\n                    <PodBlock \r\n                        index={l.guid.split('tracks/').pop()} \r\n                        key={i} \r\n                        title={l.title}\r\n                        description={l.description}\r\n                        thumbnail={l.thumbnail}\r\n                    />\r\n                );\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nexport default PodcastFeed"]},"metadata":{},"sourceType":"module"}